#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

#=================================================
# MANAGE SCRIPT FAILURE
#=================================================

# Exit if an error occurs during the execution of the script
ynh_abort_if_errors

#=================================================
# RETRIEVE ARGUMENTS FROM THE MANIFEST
#=================================================

domain=$YNH_APP_ARG_DOMAIN
path_url=$YNH_APP_ARG_PATH
with_carddav=$YNH_APP_ARG_WITH_CARDDAV
language=$YNH_APP_ARG_LANGUAGE

app=$YNH_APP_INSTANCE_NAME

#=================================================
# CHECK IF THE APP CAN BE INSTALLED WITH THESE ARGS
#=================================================
ynh_script_progression --message="Validating installation parameters..." --weight=1

final_path=/var/www/$app
test ! -e "$final_path" || ynh_die --message="This path already contains a folder"

# Register (book) web path
ynh_webpath_register --app=$app --domain=$domain --path_url=$path_url

#=================================================
# STORE SETTINGS FROM MANIFEST
#=================================================
ynh_script_progression --message="Storing installation settings..." --weight=2

ynh_app_setting_set --app=$app --key=domain --value=$domain
ynh_app_setting_set --app=$app --key=path --value=$path_url
ynh_app_setting_set --app=$app --key=with_carddav --value=$with_carddav
ynh_app_setting_set --app=$app --key=language --value=$language

#=================================================
# STANDARD MODIFICATIONS
#=================================================
# CREATE A MYSQL DATABASE
#=================================================
ynh_script_progression --message="Creating a MySQL database..." --weight=2

db_name=$(ynh_sanitize_dbid --db_name=$app)
db_user=$db_name
ynh_app_setting_set --app=$app --key=db_name --value=$db_name
ynh_mysql_setup_db --db_user=$db_name --db_name=$db_name

#=================================================
# INSTALL DEPENDENCIES
#=================================================
ynh_script_progression --message="Installing dependencies..." --weight=1

ynh_install_app_dependencies $pkg_dependencies

#=================================================
# CREATE DEDICATED USER
#=================================================
ynh_script_progression --message="Configuring system user..." --weight=3

# Create a system user
ynh_system_user_create --username=$app --home_dir="$final_path"

#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================
ynh_script_progression --message="Setting up source files..." --weight=7

ynh_app_setting_set --app=$app --key=final_path --value=$final_path
# Download, check integrity, uncompress and patch the source from app.src
ynh_setup_source --dest_dir="$final_path"

chmod 750 "$final_path"
chmod -R o-rwx "$final_path"
chown -R $app:www-data "$final_path"

#=================================================
# NGINX CONFIGURATION
#=================================================
ynh_script_progression --message="Configuring NGINX web server..." --weight=2

# Create a dedicated NGINX config
ynh_add_nginx_config

#=================================================
# PHP-FPM CONFIGURATION
#=================================================
ynh_script_progression --message="Configuring PHP-FPM..." --weight=2

# Create a dedicated PHP-FPM config
ynh_add_fpm_config
phpversion=$(ynh_app_setting_get --app=$app --key=phpversion)

#=================================================
# SPECIFIC SETUP
#=================================================
# INSTALL AND INITIALIZE COMPOSER
#=================================================
ynh_script_progression --message="Installing Roundcube with Composer..." --weight=30

# Install composer.json
cp "$final_path/composer.json-dist" "$final_path/composer.json"

# Install composer
ynh_install_composer

#=================================================
# INITIALIZE DATABASE
#=================================================
ynh_script_progression --message="Initializing database..." --weight=3

ynh_mysql_connect_as --user="$db_name" --password="$db_pwd" --database="$db_name" \
    < "$final_path/SQL/mysql.initial.sql"

#=================================================
# CONFIGURE ROUNDCUBE
#=================================================
ynh_script_progression --message="Configuring Roundcube..." --weight=2

deskey=$(ynh_string_random --length=24)
ynh_add_config --template="../conf/config.inc.php" --destination="$final_path/config/config.inc.php"

#=================================================
# INSTALL ADDITIONAL PLUGINS
#=================================================
ynh_script_progression --message="Installing additional plugins..." --weight=60

# Create logs and temp directories
mkdir -p "$final_path/"{logs,temp}

# Install net_LDAP
ynh_composer_exec --commands="require kolab/net_ldap3"

# Install contextmenu and automatic_addressbook plugins
# https://plugins.roundcube.net/packages/sblaisot/automatic_addressbook
# https://plugins.roundcube.net/packages/johndoh/contextmenu
ynh_composer_exec --commands="require \
    johndoh/contextmenu $contextmenu_version \
    sblaisot/automatic_addressbook $automatic_addressbook_version"

installed_plugins+=" 'contextmenu', 'automatic_addressbook',"

ynh_add_config --template="../conf/enigma.config.inc.php" --destination="$final_path/plugins/enigma/config.inc.php"
mkdir -p "$final_path/plugins/enigma/home"
chown -R $app:www-data "$final_path/plugins/enigma/home"

# Install CardDAV plugin
if [ $with_carddav -eq 1 ]
then
    ynh_composer_exec --commands="require roundcube/carddav $carddav_version"

    carddav_tmp_config="../conf/carddav.config.inc.php"
    carddav_server=0

    # Copy the plugin configuration file
    cp $final_path/plugins/carddav/config.inc.php{.dist,}

    # Look for installed and supported CardDAV servers
    for carddav_app in "nextcloud" "baikal"
    do
        carddav_app_ids=$(yunohost app list | grep "id: $carddav_app" | grep -Po 'id: \K(.*)' || echo "")
        for carddav_app_id in $carddav_app_ids
        do
            carddav_server=1
            # Append preset configuration to the config file
            cat "../conf/${carddav_app}.inc.php" >> $final_path/plugins/carddav/config.inc.php
            # Retrieve app settings and enable relevant preset
            carddav_domain=$(ynh_app_setting_get --app=$carddav_app_id --key=domain)
            carddav_path=$(ynh_app_setting_get --app=$carddav_app_id --key=path)
            carddav_url="https://${carddav_domain}${carddav_path%/}"
            ynh_replace_string --match_string="{${carddav_app}_id}" --replace_string="$carddav_app_id" --target_file="$final_path/plugins/carddav/config.inc.php"
            ynh_replace_string --match_string="{${carddav_app}_url}" --replace_string="$carddav_url" --target_file="$final_path/plugins/carddav/config.inc.php"
        done
    done

    # Do not actualy add the cardDAV plugin if there's no cardDAV server available...
    if [ $carddav_server -eq 1 ]
    then
        installed_plugins+=" 'carddav',"
    fi
fi

#=================================================
# UPDATE ROUNDCUBE CONFIGURATION
#=================================================
ynh_script_progression --message="Updating Roundcube configuration..." --weight=3

ynh_replace_string --match_string="^\s*// installed plugins" --replace_string="&\n $installed_plugins" --target_file="$final_path/config/config.inc.php"

# Update javascript dependencies
(cd "$final_path"
/usr/bin/php$phpversion -q ./bin/install-jsdeps.sh)

# Store the config file checksum into the app settings
ynh_store_file_checksum --file="$final_path/config/config.inc.php"

chmod 400 "$final_path/config/config.inc.php"
chown $app:$app "$final_path/config/config.inc.php"

#=================================================
# GENERIC FINALIZATION
#=================================================
# RELOAD NGINX
#=================================================
ynh_script_progression --message="Reloading NGINX web server..." --weight=2

ynh_systemd_action --service_name=nginx --action=reload

#=================================================
# END OF SCRIPT
#=================================================

ynh_script_progression --message="Installation of $app completed" --last
